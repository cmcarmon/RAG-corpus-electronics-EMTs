Algorithm  transformations  play  an  important  role  in  the  design  of  dedicated  architectures  [Parhi,  1989].
This  is  because  the  transformed  algorithms  can  be  made  to  operate  with  better  performance  (where  the
performance may be measured in terms of speed, area, or power). Examples of these transformations include
pipelining, parallel processing, retiming, unfolding, folding, look-ahead, associativity, and distributivity. These
transformations and other architectural concepts are described in detail in subsequent sections.