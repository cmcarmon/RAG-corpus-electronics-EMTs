The primary drivers for log management implementations are concerns about security, system and network operations (such as system or network administration) and regulatory compliance. Logs are generated by nearly every computing device, and can often be directed to different locations both on a local file system or remote system.
Effectively analyzing large volumes of diverse logs can pose many challenges, such as:
Volume: log data can reach hundreds of gigabytes of data per day for a large organization. Simply collecting, centralizing and storing data at this volume can be challenging.
Normalization: logs are produced in multiple formats. The process of normalization is designed to provide a common output for analysis from diverse sources.
Velocity: The speed at which logs are produced from devices can make collection and aggregation difficult
Veracity: Log events may not be accurate. This is especially problematic from systems that perform detection, such as intrusion detection systems.
Users and potential users of log management may purchase complete commercial tools or build their own log-management and intelligence tools, assembling the functionality from various open-source components, or acquire (sub-)systems from commercial vendors. Log management is a complicated process and organizations often make mistakes while approaching it.
Suggestions were made to change the definition of logging. This change would keep matters both more pure and more easily maintainable:
Logging would then be defined as all instantly discardable data on the technical process of an application or website, as it represents and processes data and user input.
Auditing, then, would involve data that is not immediately discardable. In other words: data that is assembled in the auditing process, is stored persistently, is protected by authorization schemes and is, always, connected to some end-user functional requirement.
Logging can produce technical information usable for the maintenance of applications or websites. It can serve:
to define whether a reported bug is actually a bug
to help analyze, reproduce and solve bugs
to help test new features in a development stage