An event link and a condition link express an event and a condition, respectively. Control links occur either between an object and a process or between two processes.
Event links
An event link specifies a source event and a destination process to activate on event occurrence. Triggering a process initiates an attempt to execute the process, but it does not guarantee success of this attempt. The triggering event forces an evaluation of the process' precondition for satisfaction, which, if and only if satisfied, allows process execution to proceed and the process becomes active. Regardless of whether the precondition is satisfied or not, the event will be lost. If the precondition is not satisfied, process execution will not occur until another event activates the process and a successful precondition evaluation allows the process to execute.

Basic transforming event links: A consumption event link is a link between an object and a process, which an instance of the object activates. Satisfaction of the process precondition and the subsequent process execution need to consume (affect) the instance of the activating object.
Consumption event link: Graphically, an arrow with a closed arrowhead pointing from the object to the process with the small letter e (for event). The syntax of a consumption event link OPL sentence is: Object triggers Process, which consumes Object.
Effect event link: Graphically, a bidirectional arrow with closed arrowheads at each end between the object and the process with a small letter e (for event). The syntax of an effect event link OPL sentence is: Object triggers Process, which affects Object.

Basic enabling event links:
Agent event link: An agent event link is an enabling link from an agent object to the process that it activates and enables. Graphically, a line with a filled circle ("black lollipop") at the terminal end extending from an agent object to the process it activates and enables with a small letter e (for event). The syntax of an agent event link OPL sentence is: Agent triggers and handles Process.
Instrument event link: An instrument event link is an enabling link from an instrument object to the process that it activates and enables. Graphically, a line with an empty circle ("white lollipop') at the terminal end extending from the instrument object to the process it activates and enables with a small letter e (for event). The syntax of an instrument event link OPL sentence is: Instrument triggers Process, which requires Instrument.

State-specified transforming event links:
State-specified consumption event link: A state-specified consumption event link is a consumption link that originates from a specific state of an object and terminates at a process, which an instance of the object activates. Satisfaction of the process precondition, including the activating object instance being at its specified state, and the subsequent process execution consume the activating object instance. Graphically, an arrow with a closed arrowhead pointing from the object state to the process with the small letter e (for event). The syntax of a state-specified consumption event link OPL sentence is: Specified-state Object triggers Process, which consumes Object.
Input-output-specified effect event link: An input-output-specified effect event link is an input-output-specified effect link with the additional meaning of activating the affecting process when the object enters the specified input state. Graphically, the input-output-specified effect link with a small letter e (for event). The syntax of an input-output specified effect event link OPL sentence is: Input-state Object triggers Process, which changes Object from input-state to output-state.
Input-specified effect event link: An input-specified effect event link is an input-specified effect link with the additional meaning of activating the affecting process when the object enters the specified input state. Graphically, the input-specified effect link with a small letter e (for event. The syntax of an input-specified effect event link OPL sentence is: Input-state Object triggers Process, which changes Object from input-state.
Output-specified effect event link: An output-specified effect event link is an output-specified effect link with the additional meaning of activating the affecting process when the object comes into existence. Graphically, the output-specified effect link with a small letter e (for event). The syntax of an output-specified effect event link OPL sentence is: Object in any state triggers Process, which changes Object to destination-state

State-specified agent event link:
State-specified agent event link: A state-specified agent event link is a state-specified agent link with the additional meaning of activating the process when the agent enters the specified state. Graphically, the state-specified agent link with a small letter e (for event). The syntax of a state-specified agent event link OPL sentence is: Qualifying-state Agent triggers and handles Processing".
State-specified instrument event link: A state-specified instrument event link is a state-specified instrument link with the additional meaning of activating the process when the instrument enters the specified state. Graphically, the state-specified instrument link with a small letter e (for event). The syntax of a state-specified instrument event link OPL sentence is: Qualifying-state Instrument triggers Processing, which requires qualifying-state Instrument."

Invocation links
An invocation link connects a source process to the destination process that it initiates.
Process invocation: Process invocation is an event of triggering of a process by a process. An invocation link is a link from an invoking process to the process that it invokes (triggers), meaning that when the invoking process terminates, it immediately triggers the process at the other end of the invocation link. Graphically, a lightning symbol jagged line from the invoking process terminating with a closed arrowhead at the invoked process end denote an invocation link. The syntax of an invocation link OPL sentence is: Invoking-process invokes invoked-process.
Self-invocation link: Self-invocation is invocation of a process by itself, such that that upon process termination, the process immediately invokes itself. The self-invocation link shall denote self-invocation. Graphically, a pair of invocation links, originating at the process and joining head to tail before terminating back at the original process denote the self-invocation link. The syntax of a self-invocation link OPL sentence is: Invoking-process invokes itself.
Implicit invocation link: Implicit invocation occurs upon sub-process termination within the context of an in-zoomed process, at which time the sub-process invokes the one(s) immediately below it. Graphically, there is no link between the invoking and the invoked sub-processes; their relative heights within the in-zoom context of their ancestor process implies this semantics.
Condition links
A condition link is a procedural link between a source object or object state and a destination process that provides a bypass mechanism, which enables system control to skip the destination process if its precondition satisfaction evaluation fails, otherwise the process waits for the precondition to become true.
Condition consumption link: A condition consumption link is a condition link from an object to a process, meaning that if in run-time an object instance exists, then the process precondition is satisfied, the process executes and consumes the object instance. However, if that object instance does not exist, then the process precondition evaluation fails and the control skips the process. Graphically, an arrow with a closed arrowhead pointing from the object to the process with the small letter c (for condition) near the arrowhead shall denote a condition consumption link. The syntax of the condition consumption link OPL sentence is: Process occurs if Object exists, in which case Object is consumed, otherwise Process is skipped.
Condition effect link: A condition effect link is a condition link between an object and a process, meaning that if at run-time an object instance exists, and the rest of the process precondition is satisfied, then the process executes and affects the object instance. However, if that object instance does not exist, then the process precondition evaluation fails and the control skips the process. Graphically, a bidirectional arrow with two closed arrowheads, one pointing in each direction between the affected object and the affecting process, with the small letter c (for condition) near the process end of the arrow. The syntax of the condition effect link OPL sentence is: Process occurs if Object exists, in which case Process affects Object, otherwise Process is skipped.
Condition agent link: A condition agent link is a condition link from an object to a process, meaning that if at run-time an agent instance exists and the rest of the process precondition is satisfied, then the process executes and the agent handles execution. However, if that agent instance does not exist, then the process precondition evaluation fails and the control skips the process. Graphically, a line with a filled circle ('black lollipop") at the terminal end extending from an agent object to the process it enables, with the small letter c (for condition) near the process end. The syntax of the condition agent link OPL sentence is: Agent handles Process if Agent exists, else Process is skipped.

Condition instrument link: A condition instrument link is a condition link from an object to a process, meaning that if at run-time an instrument instance exists and the rest of the process precondition is satisfied, then the process executes. However, if that instrument instance does not exist, then the process precondition evaluation fails and the control skips the process. Graphically, a line with an empty circle ("white lollipop") at the terminal end, extending from an instrument object to the process it enables, with the small letter c (for condition) near the process end, shall denote a condition instrument link. The syntax of the condition instrument link OPL sentence shall be: Process occurs if Instrument exists, else Process is skipped.
Condition state-specified consumption link: A condition state-specified consumption link is a condition consumption link that originates from a specified state of an object and terminates at a process, meaning that if an object instance exists in the specified state and the rest of the process precondition is satisfied, then the process executes and consumes the object instance. However, if that object instance does not exist in the specified state, then the process precondition evaluation fails and the control skips the process. Graphically, an arrow with a closed arrowhead pointing from the object qualifying state to the process with the small letter c (for condition) near the arrowhead.
Condition input-output-specified effect link: A condition input-output-specified effect link is an input-output specified effect link with the additional meaning that if at run-time an object instance exists and it is in the process input state (and assuming that the rest of the process precondition is satisfied), then the process executes and affects the object instance. The effect is changing the object instance state from its input state to its output state (the state that the arrowhead of the link from the process points to). However, if that object instance does not exist at the input state, then the process precondition evaluation fails and the control skips the process. Graphically, the condition input-output-specified effect link with the small letter c (for condition) near the arrowhead of the input. The syntax of the condition input-output-specified effect link OPL sentence is: Process occurs if Object is input-state, in which case Process changes Object from input-state to output-state, otherwise Process is skipped.
Condition input-specified effect link: A condition input specified effect link is an input-specified effect link with the additional meaning that if at run-time an object instance exists in the specified input state and the rest of the process precondition is satisfied, then the process executes and affects the object instance by changing its state from its input state to an unspecified state. However, if that object instance does not exist at the input state, then the process precondition evaluation fails and the control skips the process. Graphically, the condition input-specified effect link with the small letter c (for condition) near the arrowhead of the input link. The syntax of a condition input-specified effect link OPL sentence is: Process occurs if Object is input state, in which case Process changes Object from input-state, otherwise Process is skipped.
Condition output-specified effect link: A condition output-specified effect link is an output-specified effect link with the additional meaning that if at run-time an object instance exists and the rest of the process precondition is satisfied, then the process executes and affects the object instance by changing its state to the specified output-state. However, if that object instance does not exist, then the process precondition evaluation fails and the control skips the process. Graphically, the condition output-specified effect link with the small letter c (for condition) near the arrowhead of the input link. The syntax of the condition output-specified effect OPL sentence is: Process occurs if Object exists, in which case Process changes Object to output-state, otherwise Process is skipped.
Condition state-specified agent link: A condition state specified agent link is a state-specified agent link from a specified state of an object to a process, meaning that if at run-time an object instance exists in that state and the rest of the process precondition is satisfied, then the process executes and the agent handles execution. However, if an agent instance does not exist in that state, then the process precondition evaluation fails and the control skips the process. Graphically, the condition agent link extending from a specified agent state to the process it enables. The syntax of the condition state-specified agent link OPL sentence is: Agent handles Process if Agent is qualifying-state, else Process is skipped.
Condition state-specified instrument link: A condition state-specified instrument link is a state-specified instrument link from a specified state of an object to a process, meaning that if at runtime an object instance exists in that state and the process precondition is satisfied, then the process is executes. However, if an instrument instance does not exist in that state, then the process precondition evaluation fails and the control skips the process. If the skipped process is within an in-zoom context and there is a subsequent process in this context, control triggers that process, otherwise control transfers one level up to the in-zoomed process. Graphically, the condition instrument link extending from a specified instrument state to the process it enables. The syntax of the condition state-specified instrument link OPL sentence is: Process occurs if Instrument is qualifying-state, otherwise Process is skipped.
More information and examples can be found in Model-Based Systems Engineering with OPM and SysML, Chapter 13 "The Dynamic System Aspect".