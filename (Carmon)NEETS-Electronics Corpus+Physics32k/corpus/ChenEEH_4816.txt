One of the major advances in computer science over the last
few decades has been object-oriented programming (OOP).
People who learned programming before 1990 would ﬁnd
OOP somewhat elusive to deﬁne and even more elusive to
understand. The OOP, however, has taken hold in the con-
structs of the newer languages, such as Java and Cþþ (the
object-oriented version of C). The motivation for using OOP
is for the ease of evolution of software and the reuse of code for
different applications. OOP builds programs in a modular
fashion, where the software modules are called objects. Ob-
jects have well-deﬁned interfaces that are used to interact with
other objects. Each interface speciﬁes a set of object attributes
that are visible to other objects and a set of functions (or
‘‘methods’’) that represent the behavior or activities the object
can perform. The term class refers to the object type and is
analogous to a generic plan for building objects (like the
software version of the term blueprint), whereas the objects
themselves are the speciﬁc cases. Classes tend to be organized
in a hierarchical relationship: the most common features of