Functional and declarative programming result in software that can be mathematically analyzed, thus leading
to greater assurances that the software actually works. Currently these paradigms consume too much memory
and machine cycles. However, in the year 2000, very high-speed machines will be commonplace. What will we
use these powerful machines for? One answer is that we will no longer be concerned with the execution efÔ¨Åciency
of a HLL. The drawbacks of functional and declarative languages will fade, to be replaced by concern for the
correctness  and  expressiveness  of  the  HLL.  If  this  occurs,  functional  and  declarative  languages  will  be  the
preferred  HLLs  because  of  the  elevated  abstractions  supported  by  the  functional  and  declarative  paradigms.
Applications constructed from these HLLs will exhibit more sophisticated logic, communicate in non-numeric
languages such as speech and graphics, and solve problems that are beyond the reach of current HLLs.