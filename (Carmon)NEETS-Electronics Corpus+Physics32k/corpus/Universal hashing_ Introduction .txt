Assume we want to map keys from some universe



U


{\displaystyle U}
into



m


{\displaystyle m}
bins (labelled



[
m
]
=
{
0
,
…
,
m
−
1
}


{\displaystyle [m]=\{0,\dots ,m-1\}}
). The algorithm will have to handle some data set



S
⊆
U


{\displaystyle S\subseteq U}
of




|

S

|

=
n


{\displaystyle |S|=n}
keys, which is not known in advance. Usually, the goal of hashing is to obtain a low number of collisions (keys from



S


{\displaystyle S}
that land in the same bin). A deterministic hash function cannot offer any guarantee in an adversarial setting if the size of



U


{\displaystyle U}
is greater than



m
⋅
n


{\displaystyle m\cdot n}
, since the adversary may choose



S


{\displaystyle S}
to be precisely the preimage of a bin. This means that all data keys land in the same bin, making hashing useless. Furthermore, a deterministic hash function does not allow for rehashing: sometimes the input data turns out to be bad for the hash function (e.g. there are too many collisions), so one would like to change the hash function.
The solution to these problems is to pick a function randomly from a family of hash functions. A family of functions



H
=
{
h
:
U
→
[
m
]
}


{\displaystyle H=\{h:U\to [m]\}}
is called a universal family if,



∀
x
,
y
∈
U
,

x
≠
y
:



Pr

h
∈
H


[
h
(
x
)
=
h
(
y
)
]
≤


1
m




{\displaystyle \forall x,y\in U,~x\neq y:~~\Pr _{h\in H}[h(x)=h(y)]\leq {\frac {1}{m}}}
.
In other words, any two keys of the universe collide with probability at most



1

/

m


{\displaystyle 1/m}
when the hash function



h


{\displaystyle h}
is drawn randomly from



H


{\displaystyle H}
. This is exactly the probability of collision we would expect if the hash function assigned truly random hash codes to every key. Sometimes, the definition is relaxed to allow collision probability



O
(
1

/

m
)


{\displaystyle O(1/m)}
. This concept was introduced by Carter and Wegman in 1977, and has found numerous applications in computer science (see, for example ). If we have an upper bound of



ϵ
<
1


{\displaystyle \epsilon <1}
on the collision probability, we say that we have



ϵ


{\displaystyle \epsilon }
-almost universality.
Many, but not all, universal families have the following stronger uniform difference property:




∀
x
,
y
∈
U
,

x
≠
y


{\displaystyle \forall x,y\in U,~x\neq y}
, when



h


{\displaystyle h}
is drawn randomly from the family



H


{\displaystyle H}
, the difference



h
(
x
)
−
h
(
y
)


mod




m


{\displaystyle h(x)-h(y)~{\bmod {~}}m}
is uniformly distributed in



[
m
]


{\displaystyle [m]}
.
Note that the definition of universality is only concerned with whether



h
(
x
)
−
h
(
y
)
=
0


{\displaystyle h(x)-h(y)=0}
, which counts collisions. The uniform difference property is stronger.
(Similarly, a universal family can be XOR universal if



∀
x
,
y
∈
U
,

x
≠
y


{\displaystyle \forall x,y\in U,~x\neq y}
, the value



h
(
x
)
⊕
h
(
y
)


mod




m


{\displaystyle h(x)\oplus h(y)~{\bmod {~}}m}
is uniformly distributed in



[
m
]


{\displaystyle [m]}
where



⊕


{\displaystyle \oplus }
is the bitwise exclusive or operation. This is only possible if



m


{\displaystyle m}
is a power of two.)
An even stronger condition is pairwise independence: we have this property when



∀
x
,
y
∈
U
,

x
≠
y


{\displaystyle \forall x,y\in U,~x\neq y}
we have the probability that



x
,
y


{\displaystyle x,y}
will hash to any pair of hash values




z

1


,

z

2




{\displaystyle z_{1},z_{2}}
is as if they were perfectly random:



P
(
h
(
x
)
=

z

1


∧
h
(
y
)
=

z

2


)
=
1

/


m

2




{\displaystyle P(h(x)=z_{1}\land h(y)=z_{2})=1/m^{2}}
. Pairwise independence is sometimes called strong universality.
Another property is uniformity. We say that a family is uniform if all hash values are equally likely:



P
(
h
(
x
)
=
z
)
=
1

/

m


{\displaystyle P(h(x)=z)=1/m}
for any hash value



z


{\displaystyle z}
. Universality does not imply uniformity. However, strong universality does imply uniformity.
Given a family with the uniform distance property, one can produce a pairwise independent or strongly universal hash family by adding a uniformly distributed random constant with values in



[
m
]


{\displaystyle [m]}
to the hash functions. (Similarly, if



m


{\displaystyle m}
is a power of two, we can achieve pairwise independence from an XOR universal hash family by doing an exclusive or with a uniformly distributed random constant.) Since a shift by a constant is sometimes irrelevant in applications (e.g. hash tables), a careful distinction between the uniform distance property and pairwise independent is sometimes not made.
For some applications (such as hash tables), it is important for the least significant bits of the hash values to be also universal. When a family is strongly universal, this is guaranteed: if



H


{\displaystyle H}
is a strongly universal family with



m
=

2

L




{\displaystyle m=2^{L}}
, then the family made of the functions



h

mod


2


L
′







{\displaystyle h{\bmod {2^{L'}}}}
for all



h
∈
H


{\displaystyle h\in H}
is also strongly universal for




L
′

≤
L


{\displaystyle L'\leq L}
. Unfortunately, the same is not true of (merely) universal families. For example, the family made of the identity function



h
(
x
)
=
x


{\displaystyle h(x)=x}
is clearly universal, but the family made of the function



h
(
x
)
=
x

mod


2


L
′







{\displaystyle h(x)=x{\bmod {2^{L'}}}}
fails to be universal.
UMAC and Poly1305-AES and several other message authentication code algorithms are based on universal hashing. In such applications, the software chooses a new hash function for every message, based on a unique nonce for that message.
Several hash table implementations are based on universal hashing. In such applications, typically the software chooses a new hash function only after it notices that "too many" keys have collided; until then, the same hash function continues to be used over and over. (Some collision resolution schemes, such as dynamic perfect hashing, pick a new hash function every time there is a collision. Other collision resolution schemes, such as cuckoo hashing and 2-choice hashing, allow a number of collisions before picking a new hash function). A survey of fastest known universal and strongly universal hash functions for integers, vectors, and strings is found in.