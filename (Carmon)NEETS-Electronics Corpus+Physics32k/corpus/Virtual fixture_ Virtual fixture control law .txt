This section describes how a control law that implements virtual fixtures can be derived. It is assumed that the robot is a purely kinematic device with end-effector position




p

=

[

x
,
y
,
z

]



{\displaystyle \mathbf {p} =\left[x,y,z\right]}
and end-effector orientation




r

=

[


r


x



,

r


y



,

r


z




]



{\displaystyle \mathbf {r} =\left[r_{\textrm {x}},r_{\textrm {y}},r_{\textrm {z}}\right]}
expressed in the robot's base frame




F


r





{\displaystyle F_{\textrm {r}}}
. The input control signal




u



{\displaystyle \mathbf {u} }
to the robot is assumed to be a desired end-effector velocity




v

=




x

˙



=

[





p

˙



,




r

˙




]



{\displaystyle \mathbf {v} ={\dot {\mathbf {x} }}=\left[{\dot {\mathbf {p} }},{\dot {\mathbf {r} }}\right]}
. In a tele-operated system it is often useful to scale the input velocity from the operator,





v



op





{\displaystyle \mathbf {v} _{\textrm {op}}}
before feeding it to the robot controller. If the input from the user is of another form such as a force or position it must first be transformed to an input velocity, by for example scaling or differentiating.
Thus the control signal




u



{\displaystyle \mathbf {u} }
would be computed from the operator's input velocity





v



op





{\displaystyle \mathbf {v} _{\textrm {op}}}
as:





u

=
c
⋅


v



op





{\displaystyle \mathbf {u} =c\cdot \mathbf {v} _{\textrm {op}}}


If



c
=
1


{\displaystyle c=1}
there exists a one-to-one mapping between the operator and the slave robot.
If the constant



c


{\displaystyle c}
is replaced by a diagonal matrix




C



{\displaystyle \mathbf {C} }
it is possible to adjust the compliance independently for different dimensions of







x

˙





{\displaystyle {\dot {\mathbf {x} }}}
. For example, setting the first three elements on the diagonal of




C



{\displaystyle \mathbf {C} }
to



c


{\displaystyle c}
and all other elements to zero would result in a system that only permits translational motion and not rotation. This would be an example of a hard virtual fixture that constrains the motion from




x

∈


R


6




{\displaystyle \mathbf {x} \in \mathbb {R} ^{6}}
to




p

∈


R


3




{\displaystyle \mathbf {p} \in \mathbb {R} ^{3}}
. If the rest of the elements on the diagonal were set to a small value, instead of zero, the fixture would be soft, allowing some motion in the rotational directions.
To express more general constraints assume a time-varying matrix




D

(
t
)
∈


R


6
×
n


,

n
∈
[
1..6
]


{\displaystyle \mathbf {D} (t)\in \mathbb {R} ^{6\times n},~n\in [1..6]}
which represents the preferred direction at time



t


{\displaystyle t}
. Thus if



n
=
1


{\displaystyle n=1}
the preferred direction is along a curve in





R


6




{\displaystyle \mathbb {R} ^{6}}
. Likewise,



n
=
2


{\displaystyle n=2}
would give preferred directions that span a surface. From




D



{\displaystyle \mathbf {D} }
two projection operators can be defined (Marayong et al., 2003), the span and kernel of the column space:










Span


(

D

)



≡

[

D

]

=

D

(


D


T



D


)

−
1




D


T








Kernel


(

D

)



≡
⟨

D

⟩
=

I

−

[

D

]







{\displaystyle {\begin{aligned}{\textrm {Span}}(\mathbf {D} )&\equiv \left[\mathbf {D} \right]=\mathbf {D} (\mathbf {D} ^{T}\mathbf {D} )^{-1}\mathbf {D} ^{T}\\{\textrm {Kernel}}(\mathbf {D} )&\equiv \langle \mathbf {D} \rangle =\mathbf {I} -\left[\mathbf {D} \right]\end{aligned}}}


If




D



{\displaystyle \mathbf {D} }
does not have full column rank the span can not be computed, consequently it is better to compute the span by using the pseudo-inverse (Marayong et al., 2003), thus in practice the span is computed as:






Span


(

D

)
≡

[

D

]

=

D

(


D


T



D


)

†




D


T




{\displaystyle {\textrm {Span}}(\mathbf {D} )\equiv \left[\mathbf {D} \right]=\mathbf {D} (\mathbf {D} ^{T}\mathbf {D} )^{\dagger }\mathbf {D} ^{T}}


where





D


†




{\displaystyle \mathbf {D} ^{\dagger }}
denotes the pseudo-inverse of




D



{\displaystyle \mathbf {D} }
.
If the input velocity is split into two components as:






v



D



≡

[

D

]



v



op





~and~




v


τ


≡


v



op



−


v



D



=
⟨

D

⟩


v



op





{\displaystyle \mathbf {v} _{\textrm {D}}\equiv \left[\mathbf {D} \right]\mathbf {v} _{\textrm {op}}{\textrm {~and~}}\mathbf {v} _{\tau }\equiv \mathbf {v} _{\textrm {op}}-\mathbf {v} _{\textrm {D}}=\langle \mathbf {D} \rangle \mathbf {v} _{\textrm {op}}}


it is possible to rewrite the control law as:





v

=
c
⋅


v



op



=
c

(



v



D



+


v


τ



)



{\displaystyle \mathbf {v} =c\cdot \mathbf {v} _{\textrm {op}}=c\left(\mathbf {v} _{\textrm {D}}+\mathbf {v} _{\tau }\right)}


Next introduce a new compliance that affects only the non-preferred component of the velocity input and write the final control law as:





v

=
c

(



v



D



+

c

τ


⋅


v


τ



)

=
c

(


[

D

]

+

c

τ


⟨

D

⟩

)



v



op





{\displaystyle \mathbf {v} =c\left(\mathbf {v} _{\textrm {D}}+c_{\tau }\cdot \mathbf {v} _{\tau }\right)=c\left(\left[\mathbf {D} \right]+c_{\tau }\langle \mathbf {D} \rangle \right)\mathbf {v} _{\textrm {op}}}