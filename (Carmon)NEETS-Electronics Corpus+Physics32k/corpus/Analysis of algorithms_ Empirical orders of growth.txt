Assuming the execution time follows power rule, t ≈ k na, the coefficient a can be found  by taking empirical measurements of run time



{

t

1


,

t

2


}


{\displaystyle \{t_{1},t_{2}\}}
at some problem-size points



{

n

1


,

n

2


}


{\displaystyle \{n_{1},n_{2}\}}
, and calculating




t

2



/


t

1


=
(

n

2



/


n

1



)

a




{\displaystyle t_{2}/t_{1}=(n_{2}/n_{1})^{a}}
so that



a
=
log
⁡
(

t

2



/


t

1


)

/

log
⁡
(

n

2



/


n

1


)


{\displaystyle a=\log(t_{2}/t_{1})/\log(n_{2}/n_{1})}
. In other words, this measures the slope of the empirical line on the log–log plot of execution time vs. problem size, at some size point. If the order of growth indeed follows the power rule (and so the line on log–log plot is indeed a straight line), the empirical value of a will stay constant at different ranges, and if not, it will change (and the line is a curved line) - but still could serve for comparison of any two given algorithms as to their empirical local orders of growth behaviour. Applied to the above table:
It is clearly seen that the first algorithm exhibits a linear order of growth indeed following the power rule. The empirical values for the second one are diminishing rapidly, suggesting it follows another rule of growth and in any case has much lower local orders of growth (and improving further still), empirically, than the first one.