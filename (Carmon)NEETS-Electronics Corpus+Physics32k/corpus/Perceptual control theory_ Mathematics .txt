To illustrate the mathematical calculations employed in a PCT simulation, consider a pursuit tracking task in which the participant keeps a mouse cursor aligned with a moving target on a computer monitor.
The model assumes that a perceptual signal within the participant represents the magnitude of the input quantity qi. (This has been demonstrated to be a rate of firing in a neuron, at least at the lowest levels.) In the tracking task, the input quantity is the vertical distance between the target position T and the cursor position C, and the random variation of the target position acts as the disturbance d of that input quantity. This suggests that the perceptual signal p quantitatively represents the cursor position C minus the target position T, as expressed in the equation p=C–T.
Between the perception of target and cursor and the construction of the signal representing the distance between them there is a delay of Τ milliseconds, so that the working perceptual signal at time t represents the target-to-cursor distance at a prior time, t – Τ. Consequently, the equation used in the model is
1. p(t) = C(t–Τ) – T(t–Τ)
The negative feedback control system receives a reference signal r which specifies the magnitude of the given perceptual signal which is currently intended or desired. (For the origin of r within the organism, see under "A hierarchy of control", below.) Both r and p are input to a simple neural structure with r excitatory and p inhibitory. This structure is called a "comparator". The effect is to subtract p from r, yielding an error signal e that indicates the magnitude and sign of the difference between the desired magnitude r and the currently input magnitude p of the given perception. The equation representing this in the model is:
2. e = r–p
The error signal e must be transformed to the output quantity qo (representing the participant's muscular efforts affecting the mouse position). Experiments have shown that in the best model for the output function, the mouse velocity Vcursor is proportional to the error signal e by a gain factor G (that is, Vcursor = G*e). Thus, when the perceptual signal p is smaller than the reference signal r, the error signal e has a positive sign, and from it the model computes an upward velocity of the cursor that is proportional to the error.
The next position of the cursor Cnew is the current position Cold plus the velocity Vcursor times the duration dt of one iteration of the program. By simple algebra, we substitute G*e (as given above) for Vcursor, yielding a third equation:
3. Cnew = Cold + G*e*dt
These three simple equations or program steps constitute the simplest form of the model for the tracking task. When these three simultaneous equations are evaluated over and over with the same random disturbances d of the target position that the human participant experienced, the output positions and velocities of the cursor duplicate the participant's actions in the tracking task above within 4.0% of their peak-to-peak range, in great detail.
This simple model can be refined with a damping factor d which reduces the discrepancy between the model and the human participant to 3.6% when the disturbance d is set to maximum difficulty.
3'. Cnew = Cold + [(G*e)–(d*Cold)]*dt
Detailed discussion of this model in (Powers 2008) includes both source and executable code, with which the reader can verify how well this simple program simulates real behavior. No consideration is needed of possible nonlinearities such as the Weber-Fechner law, potential noise in the system, continuously varying angles at the joints, and many other factors that could afflict performance if this were a simple linear model. No inverse kinematics or predictive calculations are required. The model simply reduces the discrepancy between input p and reference r continuously as it arises in real time, and that is all that is required—as predicted by the theory.