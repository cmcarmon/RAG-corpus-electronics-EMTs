Implementation approach and plan (pilot? phased? big bang?)
Change management efforts about rationale and positive or negative impacts of changes
Training on details of the new or revised information system and work system
Conversion to the new or revised work system
Acceptance testing
As an example of the iterative nature of a work system’s life cycle, consider the sales system in a software start-up. The first sales system is the CEO selling directly. At some point the CEO can’t do it alone, several salespeople are hired and trained, and marketing materials are produced that can be used by someone less expert than the CEO. As the firm grows, the sales system becomes regionalized and an initial version of sales tracking software is developed and used. Later, the firm changes its sales system again to accommodate needs to track and control a larger salesforce and predict sales several quarters in advance. A subsequent iteration might involve the acquisition and configuration of CRM software. The first version of the work system starts with an initiation phase. Each subsequent iteration involves deciding that the current sales system is insufficient; initiating a project that may or may not involve significant changes in software; developing the resources such as procedures, training materials, and software that are needed to support the new version of the work system; and finally, implementing the new work system.
The pictorial representation of the work system life cycle model places the four phases at the vertices of rectangle. Forward and backward arrows between each successive pair of phases indicate the planned sequence of the phases and allow the possibility of returning to a previous phase if necessary. To encompass both planned and unplanned change, each phase has an inward facing arrow to denote unanticipated opportunities and unanticipated adaptations, thereby recognizing the importance of diffusion of innovation, experimentation, adaptation, emergent change, and path dependence.
The work system life cycle model is iterative and includes both planned and unplanned change. It is fundamentally different from the frequently cited Systems Development Life Cycle (SDLC), which actually describes projects that attempt to produce software or produce changes in a work system. Current versions of the SDLC may contain iterations but they are basically iterations within a project. More important, the system in the SDLC is a basically a technical artifact that is being programmed. In contrast, the system in the WSLC is a work system that evolves over time through multiple iterations. That evolution occurs through a combination of defined projects and incremental changes resulting from small adaptations and experimentation. In contrast with control-oriented versions of the SDLC, the WSLC treats unplanned changes as part of a work system’s natural evolution.