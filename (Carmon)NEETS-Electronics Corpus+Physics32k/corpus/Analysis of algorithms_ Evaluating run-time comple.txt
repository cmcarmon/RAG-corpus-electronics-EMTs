The run-time complexity for the worst-case scenario of a given algorithm can sometimes be evaluated by examining the structure of the algorithm and making some simplifying assumptions. Consider the following pseudocode:

1    get a positive integer from input
2    if n > 10
3        print "This might take a while..."
4    for i = 1 to n
5        for j = 1 to i
6            print i * j
7    print "Done!"

A given computer will take a discrete amount of time to execute each of the instructions involved with carrying out this algorithm. The specific amount of time to carry out a given instruction will vary depending on which instruction is being executed and which computer is executing it, but on a conventional computer, this amount will be deterministic. Say that the actions carried out in step 1 are considered to consume time T1, step 2 uses time T2, and so forth.
In the algorithm above, steps 1, 2 and 7 will only be run once. For a worst-case evaluation, it should be assumed that step 3 will be run as well. Thus the total amount of time to run steps 1-3 and step 7 is:





T

1


+

T

2


+

T

3


+

T

7


.



{\displaystyle T_{1}+T_{2}+T_{3}+T_{7}.\,}

The loops in steps 4, 5 and 6 are trickier to evaluate. The outer loop test in step 4 will execute ( n + 1 ) times (note that an extra step is required to terminate the for loop, hence n + 1 and not n executions), which will consume T4( n + 1 ) time. The inner loop, on the other hand, is governed by the value of j, which iterates from 1 to i. On the first pass through the outer loop, j iterates from 1 to 1: The inner loop makes one pass, so running the inner loop body (step 6) consumes T6 time, and the inner loop test (step 5) consumes 2T5 time. During the next pass through the outer loop, j iterates from 1 to 2: the inner loop makes two passes, so running the inner loop body (step 6) consumes 2T6 time, and the inner loop test (step 5) consumes 3T5 time.
Altogether, the total time required to run the inner loop body can be expressed as an arithmetic progression:





T

6


+
2

T

6


+
3

T

6


+
⋯
+
(
n
−
1
)

T

6


+
n

T

6




{\displaystyle T_{6}+2T_{6}+3T_{6}+\cdots +(n-1)T_{6}+nT_{6}}

which can be factored as





T

6



[

1
+
2
+
3
+
⋯
+
(
n
−
1
)
+
n

]

=

T

6



[



1
2


(

n

2


+
n
)

]



{\displaystyle T_{6}\left[1+2+3+\cdots +(n-1)+n\right]=T_{6}\left[{\frac {1}{2}}(n^{2}+n)\right]}

The total time required to run the outer loop test can be evaluated similarly:









2

T

5


+
3

T

5


+
4

T

5


+
⋯
+
(
n
−
1
)

T

5


+
n

T

5


+
(
n
+
1
)

T

5






=




T

5


+
2

T

5


+
3

T

5


+
4

T

5


+
⋯
+
(
n
−
1
)

T

5


+
n

T

5


+
(
n
+
1
)

T

5


−

T

5








{\displaystyle {\begin{aligned}&2T_{5}+3T_{5}+4T_{5}+\cdots +(n-1)T_{5}+nT_{5}+(n+1)T_{5}\\=\ &T_{5}+2T_{5}+3T_{5}+4T_{5}+\cdots +(n-1)T_{5}+nT_{5}+(n+1)T_{5}-T_{5}\end{aligned}}}

which can be factored as










T

5



[

1
+
2
+
3
+
⋯
+
(
n
−
1
)
+
n
+
(
n
+
1
)

]

−

T

5






=



[



1
2


(

n

2


+
n
)

]


T

5


+
(
n
+
1
)

T

5


−

T

5






=



T

5



[



1
2


(

n

2


+
n
)

]

+
n

T

5






=



[



1
2


(

n

2


+
3
n
)

]


T

5








{\displaystyle {\begin{aligned}&T_{5}\left[1+2+3+\cdots +(n-1)+n+(n+1)\right]-T_{5}\\=&\left[{\frac {1}{2}}(n^{2}+n)\right]T_{5}+(n+1)T_{5}-T_{5}\\=&T_{5}\left[{\frac {1}{2}}(n^{2}+n)\right]+nT_{5}\\=&\left[{\frac {1}{2}}(n^{2}+3n)\right]T_{5}\end{aligned}}}

Therefore, the total running time for this algorithm is:




f
(
n
)
=

T

1


+

T

2


+

T

3


+

T

7


+
(
n
+
1
)

T

4


+

[



1
2


(

n

2


+
n
)

]


T

6


+

[



1
2


(

n

2


+
3
n
)

]


T

5




{\displaystyle f(n)=T_{1}+T_{2}+T_{3}+T_{7}+(n+1)T_{4}+\left[{\frac {1}{2}}(n^{2}+n)\right]T_{6}+\left[{\frac {1}{2}}(n^{2}+3n)\right]T_{5}}

which reduces to




f
(
n
)
=

[



1
2


(

n

2


+
n
)

]


T

6


+

[



1
2


(

n

2


+
3
n
)

]


T

5


+
(
n
+
1
)

T

4


+

T

1


+

T

2


+

T

3


+

T

7




{\displaystyle f(n)=\left[{\frac {1}{2}}(n^{2}+n)\right]T_{6}+\left[{\frac {1}{2}}(n^{2}+3n)\right]T_{5}+(n+1)T_{4}+T_{1}+T_{2}+T_{3}+T_{7}}

As a rule-of-thumb, one can assume that the highest-order term in any given function dominates its rate of growth and thus defines its run-time order. In this example, n2 is the highest-order term, so one can conclude that f(n) = O(n2). Formally this can be proven as follows:

Prove that




[



1
2


(

n

2


+
n
)

]


T

6


+

[



1
2


(

n

2


+
3
n
)

]


T

5


+
(
n
+
1
)

T

4


+

T

1


+

T

2


+

T

3


+

T

7


≤
c

n

2


,

n
≥

n

0




{\displaystyle \left[{\frac {1}{2}}(n^{2}+n)\right]T_{6}+\left[{\frac {1}{2}}(n^{2}+3n)\right]T_{5}+(n+1)T_{4}+T_{1}+T_{2}+T_{3}+T_{7}\leq cn^{2},\ n\geq n_{0}}











[



1
2


(

n

2


+
n
)

]


T

6


+

[



1
2


(

n

2


+
3
n
)

]


T

5


+
(
n
+
1
)

T

4


+

T

1


+

T

2


+

T

3


+

T

7






≤



(

n

2


+
n
)

T

6


+
(

n

2


+
3
n
)

T

5


+
(
n
+
1
)

T

4


+

T

1


+

T

2


+

T

3


+

T

7



(

for

n
≥
0
)






{\displaystyle {\begin{aligned}&\left[{\frac {1}{2}}(n^{2}+n)\right]T_{6}+\left[{\frac {1}{2}}(n^{2}+3n)\right]T_{5}+(n+1)T_{4}+T_{1}+T_{2}+T_{3}+T_{7}\\\leq &(n^{2}+n)T_{6}+(n^{2}+3n)T_{5}+(n+1)T_{4}+T_{1}+T_{2}+T_{3}+T_{7}\ ({\text{for }}n\geq 0)\end{aligned}}}

Let k be a constant greater than or equal to [T1..T7]









T

6


(

n

2


+
n
)
+

T

5


(

n

2


+
3
n
)
+
(
n
+
1
)

T

4


+

T

1


+

T

2


+

T

3


+

T

7


≤
k
(

n

2


+
n
)
+
k
(

n

2


+
3
n
)
+
k
n
+
5
k




=


2
k

n

2


+
5
k
n
+
5
k
≤
2
k

n

2


+
5
k

n

2


+
5
k

n

2



(

for

n
≥
1
)
=
12
k

n

2








{\displaystyle {\begin{aligned}&T_{6}(n^{2}+n)+T_{5}(n^{2}+3n)+(n+1)T_{4}+T_{1}+T_{2}+T_{3}+T_{7}\leq k(n^{2}+n)+k(n^{2}+3n)+kn+5k\\=&2kn^{2}+5kn+5k\leq 2kn^{2}+5kn^{2}+5kn^{2}\ ({\text{for }}n\geq 1)=12kn^{2}\end{aligned}}}

Therefore




[



1
2


(

n

2


+
n
)

]


T

6


+

[



1
2


(

n

2


+
3
n
)

]


T

5


+
(
n
+
1
)

T

4


+

T

1


+

T

2


+

T

3


+

T

7


≤
c

n

2


,
n
≥

n

0



for

c
=
12
k
,

n

0


=
1


{\displaystyle \left[{\frac {1}{2}}(n^{2}+n)\right]T_{6}+\left[{\frac {1}{2}}(n^{2}+3n)\right]T_{5}+(n+1)T_{4}+T_{1}+T_{2}+T_{3}+T_{7}\leq cn^{2},n\geq n_{0}{\text{ for }}c=12k,n_{0}=1}


A more elegant approach to analyzing this algorithm would be to declare that [T1..T7] are all equal to one unit of time, in a system of units chosen so that one unit is greater than or equal to the actual times for these steps. This would mean that the algorithm's running time breaks down as follows:




4
+

∑

i
=
1


n


i
≤
4
+

∑

i
=
1


n


n
=
4
+

n

2


≤
5

n

2



(

for

n
≥
1
)
=
O
(

n

2


)
.


{\displaystyle 4+\sum _{i=1}^{n}i\leq 4+\sum _{i=1}^{n}n=4+n^{2}\leq 5n^{2}\ ({\text{for }}n\geq 1)=O(n^{2}).}