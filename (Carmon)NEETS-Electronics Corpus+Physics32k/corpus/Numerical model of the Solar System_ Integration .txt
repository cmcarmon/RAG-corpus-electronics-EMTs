In the previous section it was assumed that acceleration remains constant over a small timestep Δt so that the calculation reduces to simply the addition of V × Δt to R and so forth. In reality this is not the case, except when one takes Δt so small that the number of steps to be taken would be prohibitively high. Because while at any time the position is changed by the acceleration, the value of the acceleration is determined by the instantaneous position. Evidently a full integration is needed.
Several methods are available. First notice the needed equations:








a
→




j


=

∑

i
≠
j


n


G



M

i




|





r
→




i


−




r
→




j




|


3





(




r
→




i


−




r
→




j


)


{\displaystyle {\vec {a}}_{j}=\sum _{i\neq j}^{n}G{\frac {M_{i}}{|{\vec {r}}_{i}-{\vec {r}}_{j}|^{3}}}({\vec {r}}_{i}-{\vec {r}}_{j})}

This equation describes the acceleration all bodies i running from 1 to N exercise on a particular body j. It is a vector equation, so it is to be split in 3 equations for each of the X, Y, Z components, yielding:




(

a

j



)

x


=

∑

i
≠
j


n


G



M

i



(
(

x

i


−

x

j



)

2


+
(

y

i


−

y

j



)

2


+
(

z

i


−

z

j



)

2



)

3

/

2





(

x

i


−

x

j


)


{\displaystyle (a_{j})_{x}=\sum _{i\neq j}^{n}G{\frac {M_{i}}{((x_{i}-x_{j})^{2}+(y_{i}-y_{j})^{2}+(z_{i}-z_{j})^{2})^{3/2}}}(x_{i}-x_{j})}

with the additional relationships





a

x


=



d

v

x




d
t





{\displaystyle a_{x}={\frac {dv_{x}}{dt}}}
,




v

x


=



d
x


d
t





{\displaystyle v_{x}={\frac {dx}{dt}}}

likewise for Y and Z.
The former equation (gravitation) may look foreboding, but its calculation is no problem. The latter equations (motion laws) seems simpler, but yet it cannot be calculated. Computers cannot integrate, they cannot work with infinitesimal values, so instead of dt we use Δt and bringing the resulting variable to the left:




Δ

v

x


=

a

x


Δ
t


{\displaystyle \Delta v_{x}=a_{x}\Delta t}
, and:



Δ
x
=

v

x


Δ
t


{\displaystyle \Delta x=v_{x}\Delta t}

Remember that a is still a function of time. The simplest way to solve these is just the Euler algorithm, which in essence is the linear addition described above. Limiting ourselves to 1 dimension only in some general computer language:

a.old = gravitationfunction(x.old)
x.new = x.old + v.old * dt
v.new = v.old + a.old * dt

As in essence the acceleration used for the whole duration of the timestep, is the one as it was in the beginning of the timestep, this simple method has no high accuracy. Much better results are achieved by taking a mean acceleration, the average between the beginning value and the expected (unperturbed) end value:

a.old = gravitationfunction(x.old)
x.expect = x.old + v.old * dt
a.expect = gravitationfunction(x.expect)
v.new = v.old + (a.old + a.expect) * 0.5 * dt
x.new = x.old + (v.new + v.old) * 0.5 * dt

Of course still better results can be expected by taking intermediate values. This is what happens when using the Runge-Kutta method, especially the one of grade 4 or 5 are most useful.
A completely different method is the use of Taylor series. In that case we write:



r
=

r

0


+

r

0

′

t
+

r

0

″




t

2



2
!



+
.
.
.


{\displaystyle r=r_{0}+r'_{0}t+r''_{0}{\frac {t^{2}}{2!}}+...}

but rather than developing up to some higher derivative in r only, one can develop in r and v (that is r') by writing



r
=
f

r

0


+
g

r

0

′



{\displaystyle r=fr_{0}+gr'_{0}}
and then write out the factors f and g in a series.